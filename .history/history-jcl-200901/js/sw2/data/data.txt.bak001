/* Sparrow Rich Internet Application framework, version 1.0.0
 * (c) 2006 
 *
/*--------------------------------------------------------------------------*/
System.defineNs({
	name  	: "pst.data",
	props	: {
		DT_INT 		: "int",
		DT_LONG		: "long",
		DT_FLOAT 	: "float",
		DT_DOUBLE	: "int",
		DT_DECIMAL 	: "decimal",
		DT_DATE 	: "date",
		DT_TIME 	: "time",
		DT_DATETIME : "datetime",
		DT_STRING   : "string"
	}
});

var $D = pst.data;

System.defineClass({
	name 		: "pst.data.Parameter",
	superc		: jcf.Object,
	statics		: {},
	instances	: {
		_name	   : "",
		_dataType  : "",
		_value     : "",

		initialize : function (name, dataType) {
			this._name = name;
			if (dataType) {
				this._dataType = dataType;
			} else {
				this._dataType = $D.DT_STRING;
			};
			this._value = null;
		},

		getName : function() {
			return this._name;
		},

		getDataType : function() {
			return this._dataType;
		},

		setDataType : function(dataType) {
			this._dataType = dataType;
		},

		getValue : function() {
			return this._value;
		},

		setValue : function(value) {
			this._value = value;
		}
	}
	
});

System.defineClass({
	name		: "pst.data.ParameterSet",
	superc		: Object,
	statics		: {},
	instances	: {
		initialize : function() {
			this._paras = new Hash();
		},

		toString : function() {
			var s = "ParameterSet:\n";
			var paras = this._paras.values();
			for (var i = 0; i < paras.length; i++) {
				var para = paras[i];
				s += para._name + ": " + paraname._value + "\n";
			}
			return s;
		},

		addParameter : function(name, dataType) {
			var parameter = new Parameter(name, dataType);
			var name = name.toLowerCase();
			this._paras.put(name, parameter);
			return parameter;
		},

		removeParameter : function(name) {
			var name = name.toLowerCase();
			var parameter = this._paras.get(name);
			this._paras.remove(name);
			return parameter;
		},

		getParameter : function(name) {
			var name = name.toLowerCase();
			var parameter = this._paras.get(name);
			return parameter;
		},

		getCount : function() {
			return this._paras.count();
		},

		setValue : function(name, value) {
			var parameter = this.getParameter(name);
			if (!parameter) {
				parameter = this.addParameter(name);
			};
			
			if (parameter != null) {
				if (value != null) {
					switch (parameter._dataType) {
						case "byte" :
							;
						case "short" :
							;
						case "int" :
							;
						case "long" :
							{
								if (typeof(value) != "number") {
									value = parseInt(value);
								};
								break;
							};
						case "float" :
							;
						case "double" :
							;
						case "bigdecimal" :
							{
								if (typeof(value) != "number") {
									value = parseFloat(value);
								};
								break;
							};
						case "date" :
						case "datetime" :
							{
								if (typeof(value) != "number") {
									value = parseDate(value).getTime();
								};
								break;
							};
						case "time" :
							{
								if (typeof(value) != "number") {
									value = parseTime(value).getTime();
								};
								break;
							};
						case "boolean" :
							{
								if (typeof(value) != "boolean") {
									value = parseBoolean(value);
								};
								break;
							}
					}
				};
				parameter._value = value;
			}
		},

		getValue : function(name) {
			var parameter = this.getParameter(name);
			if (parameter != null) {
				return parameter._value;
			}
		},

		setDataType : function(name, dataType) {
			var parameter = this.getParameter(name);
			if (!parameter && typeof(name) != "number") {
				parameter = this.addParameter(name);
			};
			if (parameter != null) {
				parameter._dataType = dataType;
			}
		},

		getDataType : function(name) {
			var parameter = this.getParameter(name);
			if (parameter != null) {
				return parameter._dataType;
			}
		},

		clear : function() {
			this._paras.clear();
		}

	}
});

System.defineClass({
	name		: "pst.data.DataColumn",
	superc		: Object,
	statics		: {},
	instances	: {
		_name		: "",
		_dataType	: $D.DT_STRING,
		_caption	: "",
		_readOnly	: false,
		_format		: "",
		_defaultValue : null,
		_toolTip	: "",
		_valueProtected : false,
		_visible 		: true,
		_supportsSum 	: false,
		_validators 	: [],
		
		
		initialize : function (name, dataType) {
		/*
			function $TY() {
				var $co = $dropdownDate;
				if ($co == null) {
					$co = DoradoFactory.initialize("DateDropDown", null, "$dropdownDate");
					$dropdownDate = $co;
				};
				return $co;
			};
		*/	
			this._name = name;
			if (dataType) {
				this._dataType = dataType;
			} else {
				this._dataType = "string";
			};
			this._caption = name;
			this._readOnly = false;
			this._format = null;
//			this._editorType = null;
//			this._dropDown = null;
			this._defaultValue = null;
			this._toolTip = null;
			this._valueProtected = false;
			this._visible = true;
			this._supportsSum = false;
			this._validators = new Array();
			switch (dataType) {
				case "float" :
					;
				case "double" :
					;
				case "bigdecimal" :
					{
						this._format = "#,##.##";
						this._scale = 2;
						break;
					};
				case "date" :
					{
						this._format = "yyyy-MM-dd";
//						this._dropDown = $TY();
						break;
					};
				case "time" :
					{
						this._format = "HH:mm:ss";
						break;
					};
				case "datetime" :
					{
						this._format = "yyyy-MM-dd HH:mm:ss";
//						this._dropDown = $TY();
						break;
					}
			}
		},

		getName : function() {
			return this._name;
		},

		getDataType : function() {
			return this._dataType;
		},

		getCaption : function() {
			return this._caption;
		},

		setCaption : function(caption) {
			this._caption = caption;
		},

		isReadOnly : function() {
			return this._readOnly;
		},

		setReadOnly : function(readOnly) {
			this._readOnly = readOnly;
		},

		getFormat : function() {
			return this._format;
		},

		setFormat : function(format) {
			this._format = format;
			if (format) {
				switch (this._dataType) {
					case "float" :
						;
					case "double" :
						;
					case "bigdecimal" :
						{
							var $wD = $mt($yP);
							this._scale = $wD.$YC;
						}
				}
			}
		},

/*
		getEditorType : function() {
			return this._editorType;
		},

		setEditorType : function(editorType) {
			this._editorType = editorType;
		},
*/
		getDropDown : function() {
			return this._dropDown;
		},

		setDropDown : function(dropDown) {
			this._dropDown = dropDown;
		},

		getDefaultValue : function() {
			return this._defaultValue;
		},

		setDefaultValue : function(defaultValue) {
			this._defaultValue = defaultValue;
		},

		getToolTip : function() {
			return this._toolTip;
		},

		setToolTip : function(toolTip) {
			this._toolTip = toolTip;
		},

		isValueProtected : function() {
			return this._valueProtected;
		},

		setValueProtected : function(valueProtected) {
			this._valueProtected = valueProtected;
		},

		isVisible : function() {
			return this._visible;
		},

		setVisible : function(visible) {
			this._visible = visible;
		},

		isSupportsSum : function() {
			return this._supportsSum;
		},

		setSupportsSum : function(supportSum) {
			this._supportsSum = supportSum;
		},

		addValidator : function(validator) {
			this._validators.push(validator);
		},

		getTag = __getTag;
		setTag = __setTag;
	}
});




System.defineClass({
	name		: "pst.data.DataRow",
	superc		: jcf.Object,
	statics		: {
		DRS_NON 		: "non",
		DRS_ADDED 		: "Added",
		DRS_DELETED 	: "Deleted",
		DRS_DETACHED 	: "Detached",
		DRS_MODIFIED 	: "Modified",
		DRS_UNCHANGED 	: "Unchanged",

		VER_CURRENT 	: "current",
		VER_DEFAULT 	: "default",
		VER_ORIGINAL 	: "original",
		VER_PROPOSED	: "proposed"
	},
	instances	: {
		initialize : function (table) {
			this._visible = false;
			this._table = table;
			this._pageIndex = table._pageIndex;
			this._id = _getUniqueIndex();
			this._state = DataRow.DRS_NON;
			this._dirty = false;
			this._validDataRow = null;
			
			this._originalVer = null;
			this._currentVer  = null;
			this._proposedVer = null;

			this._loaded  = false;
			this._editing = false;
		},

		toString : function() {
			var text = "[DataRow]\n";
			text += "id: " + this._id + "\n";
			text += "state: " + this._state + "\n";
			text += "isDirty: " + this._dirty + "\n";
			text += "\n";
			var table = this._table;
			var dataColumnCount = table.getDataColumnCount();
			for (var i = 0; i < dataColumnCount; i++) {
				var dataColumn = table.getDataColumn(i);
				text += i + "." + dataColumn.getName() + ": " + this.getValue(i) + "\n";
			};
			return text;
		},

		finalize   : function() {
			var detailDataRowCollections = this._detailDataRowCollections;
			if (detailDataRowCollections != null) {
				var size = detailDataRowCollections.size();
				for (var i = 0; i < size; i++) {
					var $01 = detailDataRowCollections._objects[i];
					$01.destroy();
				}
			};
			this._recordSet = null;
			this._table = null;
		},

		getPageIndex : function() {
			return this._pageIndex;
		},

		setPageIndex : function(pageIndex) {
			this._pageIndex = pageIndex;
		},

		getState : function() {
			return this._state;
		},

		setState : function(state) {
			this._state = state;
		//	this._table.broadcastDatasetMessage($Gn,[this]);
		},

		getTable : function() {
			return this._table;
		},

		isDirty : function() {
			return this._dirty;
		},

		setDirty : function(dirty) {
			this._dirty = dirty;
		},

		getValueAt : function (coloumnIndex,version) {
			var dataColumn = this._table._dataColumns.get(coloumnIndex);
			if (dataColumn == null) {
				alert(__DATASET_FIELD_NOT_FOUND.replace(/ \ $ \ {
					dataColumn \ }
				/ g, this._table.id + "." + name));
				return null;
			};
			if (!version) {
				version = DataRow.VER_DEFAULT;
			}	
			
			var value = undefined;
			
			if (version == DataRow.VER_DEFAULT) {
				if  (this._proposedVer != null) {
					value = this._proposedVer[columnIndex];
				} else if (this._currentVer!=null) {
					value = this._currentVer[columnIndex];
				} else 	if (this._originalVer!=null) {
					value = this._originalVer[columnIndex];
				}
			} else  if (version == DataRow.VER_CURRENT) {
				if (this._currentVer!=null) {
					value = this._currentVer[columnIndex];
				}	
			} else if (version == DataRow.VER_ORIGINAL) {
				if (this._originalVer!=null) {
					value = this._originalVer[columnIndex];
				}	
			} else if (version == DataRow.PROPOSED) {
				if  (this._proposedVer != null) {
					value = this._proposedVer[columnIndex];
				}	
			} 
			
			return value;
		},

		getValue : function(columnName,version) {
			var coloumnIndex =  this._table._dataColumns.indexOf(columnName);
			return this.getValueAt(columnIndex,version);
		},

		hasVersion : function(version) {
			if (version == DataRow.VER_CURRENT) {
				return this._currentVer !=null;
			} else if (version == DataRow.VER_ORIGINAL) {
				return this._originalVer !=null;
			} else if (version == DataRow.VER_PROPOSED) {
				return this._proposedVer !=null;
			}
		},

		getString : function(name) {
			var index;
			if (typeof(name) == "number") {
				index = name;
			} else {
				index = this._table._dataColumns.indexOf(name.toLowerCase());
			};
			var text = "";
			var dataColumn = this._table._dataColumns.get(index);
			if (dataColumn != null) {
				var value = this[index];
				if (typeof(value) == "undefined")
					value = null;
				var table = this._table;
				if (table.$oL != null) {
					value = fireDoradoEvent(table, "onGetValue",[table, this, dataColumn, value]);
				};
				if (value != null) {
					switch (dataColumn._dataType) {
						case "int" :
							;
						case "long" :
							{
								if (dataColumn._format != null) {
									text = formatFloat(value, dataColumn._format);
								} else {
									text = value;
								};
								break;
							};
						case "float" :
							;
						case "double" :
							;
						case "bigdecimal" :
							{
								text = formatFloat(value, dataColumn._format);
								break;
							};
						case "date" :
							;
						case "time" :
							;
						case "datetime" :
							{
								text = formatDate(value, dataColumn._format);
								break;
							};
						default :
							{
								text = value.toString();
								break;
							}
					}
				}
			} else {
		//		alert(__DATASET_FIELD_NOT_FOUND.replace(/ \ $ \ {
		//			dataColumn \ }
		//		/ g, this._table.id + "." + name));
			};
			return text;
		},


		doSetValue : function(name, value,version) {
			function round(value, scale) {
				if (value != 0) {
					var mul = Math.pow(10, value);
					return Math.round(value * mul) / mul;
				} else {
					return 0;
				}
			};
			var index;
			if (typeof(name) == "number") {
				index = name;
			} else {
				index = this._table._dataColumns.indexOf(name.toLowerCase());
			};
			
			var table = this._table;
			var dataColumn = table._dataColumns.get(index);
			if (dataColumn != null) {
				if (table._disableEventCount <= 0
					&& table._beforeSelectionChange != null
					&& dataColumn.name == "select") {
					var result = fireDoradoEvent(table, "beforeSelectionChange",[table, this]);
					if (result != null)
						throw result;
				};
				if (table._disableEventCount <= 0 && table._beforeChange != null) {
					var result =
						fireDoradoEvent(table, "beforeChange",[table, this, dataColumn, value]);
					if (result != null)
						throw result;
				};
				if (table._onSetValue != null) {
					value = fireDoradoEvent(table, "onSetValue",[table, this, dataColumn, value]);
				};
				var $Bm = this[index];
				var $9m = value;
				if (value != null) {
					switch (dataColumn._dataType) {
						case "byte" :
							;
						case "short" :
							;
						case "int" :
							;
						case "long" :
							{
								if (value + "" == "") {
									value = null;
								} else if (typeof(value) != "number") {
									value = parseInt(value);
									if (isNaN(value)) {
										throw $8k.replace(/ \ $ \ {
											value \ }
										/ g, $9m);
									}
								};
								break;
							};
						case "float" :
							;
						case "double" :
							;
						case "bigdecimal" :
							{
								if (value + "" == "") {
									value = null;
								} else if (typeof(value) != "number") {
									value = parseFloat(value);
									if (dataColumn._scale > 0) {
										value = $jx(value, dataColumn._scale);
									};
									if (isNaN(value)) {
										throw __DATASET_INVALID_FLOAT.replace(/ \ $ \ {
											value \ }
										/ g, $9m);
									}
								};
								break;
							};
						case "date" :
						case "datetime" :
							{
								if (value + "" == "") {
									value = null;
								} else if (typeof(value) == "string") {
									value = parseDate(value);
									if (isNaN(value)) {
										throw __DATASET_INVALID_DATE;
									}
								};
								break;
							};
						case "time" :
							{
								if (value + "" == "") {
									value = null;
								} else if (typeof(value) == "string") {
									value = parseTime(value);
									if (isNaN(value)) {
										throw __DATASET_INVALID_TIME;
									}
								};
								break;
							}
						case "boolean" :
							{
								if (typeof(value) != "boolean") {
									value = parseBoolean(value);
								};
								break;
							}
					}
				};
				var validators = dataColumn._validators;
				for (var i = 0; i < validators.length; i++) {
					var validator = validators[i];
					if (validator._validateImmediately) {
						if (!validator.validate(value)) {
							if (table._disableEventCount <= 0 && validator._onValidateFailed != null) {
								if (!fireDoradoEvent(validator,
									"onValidateFailed",
									[validator,
									dataColumn,
									value]))
									continue;
							};
							throw validator.getFinalErrorMessage().replace(/ \ $ \ {
								dataColumn \ }
							/ g, dataColumn.getCaption());
						}
					}
				};
				this[index] = value;
				if (dataColumn._supportsSum) {
					var table = this._table;
					var sum = table._sum;
					if (sum == null) {
						sum = new Object();
						table._sum = sum;
					};
					var sumDataColumnName = "_" + dataColumn.name;
					var sumValue = sum[sumDataColumnName];
					if (typeof(sumValue) != "number") {
						sumValue = 0;
					};
					var $wD = parseFloat($Bm);
					if (!isNaN($wD))
						sumValue -= $wD;
					$wD = parseFloat(value);
					if (!isNaN($wD))
						sumValue += $wD;
					sum[sumDataColumnName] = sumValue;
				};
				if (!this.$42) {
					this._dirty = true;
					table.broadcastDatasetMessage($Gn,[this]);
				};
				table.broadcastDatasetMessage(__Dataset_MSG_DATA_CHANGED,[this, name, $Bm]);
				if (table._disableEventCount <= 0 && table._afterChange != null) {
					fireDoradoEvent(table, "afterChange",[table, this, dataColumn, $Bm]);
				};
				if (table._disableEventCount <= 0
					&& table._beforeSelectionChange != null
					&& dataColumn.name == "select") {
					var result = fireDoradoEvent(table, "afterSelectionChange",[table, this]);
					if (result != null)
						throw result;
				}
			} else {
				alert(__DATASET_FIELD_NOT_FOUND.replace(/ \ $ \ {
					dataColumn \ }
				/ g, table.id + "." + name));
			}
		},

		setValueAt : function(columnIndex, columnValue) {
			try {
				var version ;
				if  (this._loading) {
					version = DataRow.VER_ORIGINAL;
				} else if (this._editing) {
					version = DataRow.VER_PROPOSED;
				} else {
					version = DataRow.VER_CURRENT;
				}
				this.doSetValue(columnIndex, columnValue,version);
			} catch (e) {
				processException(e);
			}
		},

		setValue : function(columnName, columnValue) {
			var columnIndex = this._table._dataColumns.indexOf(name.toLowerCase());
			setValueAt(columnIndex,columnValue);
		},

		doCancel : function() {
			var table = this._table;
			table.broadcastDatasetMessage(__Dataset_MSG_GAINING_CHANGE, null);
			if (this._state != RECORD_STATUS_NEW) {
				if (this._dirty) {
					if (table._disableEventCount <= 0) {
						var result = fireDoradoEvent(table, "beforeCancel",[table, this]);
						if (result != null)
							throw result;
					};
					var validDataRow = this.getValidDataRow();
					var $O1 = this._table.getDataColumnCount();
					for (var i = 0; i < $O1; i++) {
						this[i] = validDataRow[i];
					};
					this._dirty = false;
					this._state = RECORD_STATUS_NONE;
					var table = table._table;
					if (table._visibleDataRowCount >= 0)
						table._visibleDataRowCount--;
					if (table._disableEventCount <= 0) {
						fireDoradoEvent(table, "afterCancel",[table, this]);
					};
					table.broadcastDatasetMessage(__Dataset_MSG_REFRESH_RECORD,[this]);
				}
			} else {
				if (table._disableEventCount <= 0) {
					var result = fireDoradoEvent(table, "beforeCancel",[table, this]);
					if (result != null)
						throw result;
				};
				var $Un = this.getNextDataRow();
				if ($Un == null) {
					$Un = this.getPrevDataRow();
				};
				table.__deleteDataRow(this);
				if (table._disableEventCount <= 0) {
					fireDoradoEvent(table, "afterCancel",[table, this]);
				};
				table.setCurrent($Un);
				table.broadcastDatasetMessage(__Dataset_MSG_RECORD_DELETED,[this]);
				this.destroy();
			}
		},

		del : function() {
		},

		beginEdit :  function() {
			if (this._editing ) {
				return;
			}
			var dataColumnCount = this._table.getDataColumnCount();
			this._proposed = new Array(dataColumnCount);
			for (var i = 0; i < dataColumnCount; i++) {
				this.__proposedVer[i] = this.currentVer[i];
			}
			this._editing = true;
		},

		endEdit :  function() {
			var dataColumnCount = this._table.getDataColumnCount();
			for (var i = 0; i < dataColumnCount; i++) {
				this._currentVer[i] = this._proposed[i];
			}
			this._proposed = null;
			this._editing = false;
		},

		cancelEdit : function() {
			this._proposed = null;
			this._editing = false;
		},

		_validate : function() {
			var table = this._table;
			var dataColumns = table._dataColumns;
			var dataColumnCount = dataColumns.size();
			for (var i = 0; i < dataColumnCount; i++) {
				var dataColumn = dataColumns.get(i);
				var validators = dataColumn._validators;
				for (var i = 0; i < validators.length; i++) {
					var validator = validators[i];
					if (!validator._validateImmediately) {
						var value = this.getValue(i);
						if (!validator.validate(value)) {
							if (table._disableEventCount <= 0 && validator._onValidateFailed != null) {
								if (!fireDoradoEvent(validator,
									"onValidateFailed",
									[validator,
									dataColumn,
									value]))
									continue;
							};
							throw validator.getFinalErrorMessage().replace(/ \ $ \ {
								dataColumn \ }
							/ g, dataColumn.getCaption());
						}
					}
				}
			}
		},

		doAcceptChanges : function() {
			var table = this.getTable();
			table.broadcastDatasetMessage(__Dataset_MSG_GAINING_CHANGE, null);
			if (this._dirty) {
				if (table._disableEventCount <= 0) {
					var result = fireDoradoEvent(table, "beforePost",[table, this]);
					if (result != null)
						throw result;
				};
				this._validate();
				var validDataRow = this._current;
				if (validDataRow != null) {
					var dataColumnCount = this._table.getDataColumnCount();
					for (var i = 0; i < dataColumnCount; i++) {
						validDataRow[i] = this[i];
					}
				};
				this._dirty = false;
				if (this._state == RECORD_STATUS_NONE) {
					this.setState(RECORD_STATUS_MODIFY);
				} else if (this._state == RECORD_STATUS_NEW) {
					this.setState(RECORD_STATUS_INSERT);
				};
				table.broadcastDatasetMessage(__Dataset_MSG_REFRESH_RECORD,[this]);
				if (table._disableEventCount <= 0) {
					fireDoradoEvent(table, "afterPost",[table, this]);
				}
			} else if (this._state == RECORD_STATUS_NEW) {
				if (table._disableEventCount <= 0) {
					var result = fireDoradoEvent(table, "beforePost",[table, this]);
					if (result != null)
						throw result;
				};
				var $Un = this.getNextDataRow();
				if ($Un == null) {
					$Un = this.getPrevDataRow();
				};
				table.__deleteDataRow(this);
				table.setCurrent($Un);
				table.broadcastDatasetMessage(__Dataset_MSG_RECORD_DELETED,[this]);
				this.destroy();
			}
			return true;
		},

		acceptChanges  : function() {
			try {
				return this.doAcceptChanges();
			} catch (e) {
				processException(e);
				return false;
			}
		}

	}
});


System.defineClass({
	name		: "pst.data.DataRowCollection",
	superc		: jcf.Object,
	statics		: {},
	instances	: {
		initialize : function (table) {
			this._table = table;
			this._pageIndex = 1;
			this._pageCount = 1;
			this._pages = new Array();
			this._visibleDataRowCount = 0;
			this._recordCount = 0;
		},

		DataRowCollection.prototype = new Collection();
		destroy : function() {
			this._doClearData();
		},

		clearData : function() {
			this._pageIndex = 1;
			this._pageCount = 1;
			this._pages = new Array();
			this._visibleDataRowCount = 0;
			this._recordCount = 0;
			this._doClearData();
			this.initIndexs();
			this._first = null;
			this._last = null;
			this._size = 0;
		},

		_doClearData : function() {
			if (this._table._recordSet == this) {
				this._table.setCurrent(null);
			};
			var element = this._first;
			while (element != null) {
				var record = element;
				if (record) {
					record.destroy();
				};
				element = element._phsNext;
			}
		},

		getPage : function(pageIndex) {
			return this._pages[pageIndex - 1];
		},

		getPageObject : function(pageIndex) {
			var $ba = new Object();
			this._pages[pageIndex - 1] = $ba;
			return $ba;
		}
	}
});

System.defineClass({
	name		: "pst.data.MasterDetailLink",
	superc		: jcf.Object,
	statics		: {},
	instances	: {
		initialize		: function(masterDataset,detailDataset) {
			this._masterDataset = masterDataset;
			this._detailDataset = detailDataset;
			this.setMasterKeyDataColumns(null);
			this.setDetailKeyDataColumns(null);
			this.setDetailKeyparas(null);
		},

		getMasterDataset : function() {
			return this._masterDataset;
		},

		getDetailDataset : function() {
			return this._detailDataset;
		},

		getMasterKeyDataColumns : function() {
			return this._masterKeyDataColumns;
		},

		setMasterKeyDataColumns : function(masterKeyDataColumns) {
			this._masterKeyDataColumns = masterKeyDataColumns;
			if (masterKeyDataColumns != null) {
				this._masterKeyDataColumnArray = masterKeyDataColumns.split(",");
			} else {
				this._masterKeyDataColumnArray = new Array();
			}
		},

		getDetailKeyDataColumns : function() {
			return this._detailKeyDataColumns;
		},

		setDetailKeyDataColumns : function(detailKeyDataColumns) {
			this._detailKeyDataColumns = detailKeyDataColumns;
			if (detailKeyDataColumns != null) {
				this._detailKeyDataColumnArray = detailKeyDataColumns.split(",");
			} else {
				this._detailKeyDataColumnArray = new Array();
			}
		},

		getDetailKeyparas : function() {
			return this._detailKeyparas;
		},

		setDetailKeyparas : function(detailKeyparas) {
			this._detailKeyparas = detailKeyparas;
			if (detailKeyparas != null) {
				this._detailKeyParameterArray = detailKeyparas.split(",");
			} else {
				this._detailKeyParameterArray = new Array();
			}
		},

		getMasterKeyDataColumnArray : function() {
			return this._masterKeyDataColumnArray;
		},

		getDetailKeyDataColumnArray : function() {
			return this._detailKeyDataColumnArray;
		},

		getDetailKeyParameterArray : function() {
			return this._detailKeyParameterArray;
		}

	}
});


System.defineClass({
	name		: "pst.data.DataTable",
	superc		: jcf.Object,
	statics		: {
	},
	instances	: {
		initialize		: function (id, viewModel, type) {
			if (!id)
				id = _getUniqueControlId();
			this.id = id;
			this._viewModel = viewModel;
			this._type = type;
			this._fields  = new HashList();
			this._recordSet = new RecordSet(this);
			this._paras = new paraset();
			this._recordSet = this._recordSet;
			this._observers = new Collection();
			this.$h7 = new Object();
			this._readOnly = false;
			this._async = false;
			this._autoLoadPage = false;
			this._pageSize = 10000;
			this._showLoadingTip = false;
			this._first = true;
			this._last = true;
			this._current = null;
			this._disableControlCount = 0;
			this._disableEventCount = 0;
			this.$Sa = false;
			this._loadDataAction = null;
			this.$47 = false;
			this._masterLink = null;
//			this.$0T = false;
			this._disableBindingCount = 0;
			this._recordSet.getPageObject(1);
			fireDoradoEvent(this, "onCreate",[this]);
		},

		toString : function() {
			var text = "[DataTable]\n";
			text += "id: " + this.id + "\n";
			text += "master: " + ((this._masterDataset == null) ? "" : this._masterDataset.id) + "\n";
			text += "\n";
			var fieldCount = this.getFieldCount();
			for (var i = 0; i < fieldCount; i++) {
				var field = this.getField(i);
				text += i + "." + field.getName() + " (" + field.getDataType() + ")\n";
			};
			return text;
		},

		destroy : function() {
			var element = this._observers._first;
			while (element != null) {
				element._data = null;
				element = element._phsNext;
			};
			this._observers.clear();
		},

		disableBinding : function() {
			this._disableBindingCount++;
		},

		enableBinding : function() {
			this._disableBindingCount--;
		},

		paras : function() {
			return this._paras;
		},

		isReadOnly : function() {
			return this._readOnly;
		},

		setReadOnly : function(readOnly) {
			this._readOnly = readOnly;
			this.refreshControls();
		},

		isAsync : function() {
			return this._async;
		},

		setAsync : function(async) {
			this._async = async;
		},

		isAutoLoadPage : function() {
			return this._autoLoadPage;
		},

		setAutoLoadPage : function(autoLoadPage) {
			this._autoLoadPage = autoLoadPage;
		},

		getPageSize : function() {
			return this._pageSize;
		},

		setPageSize : function(pageSize) {
			this._pageSize = pageSize;
		},

		isShowLoadingTip : function() {
			return this._showLoadingTip;
		},

		setShowLoadingTip : function(showLoadingTip) {
			this._showLoadingTip = showLoadingTip;
		},

		getPageIndex : function() {
			return this._recordSet._pageIndex;
		},

		setPageIndex : function(pageIndex) {
			this._recordSet._pageIndex = pageIndex;
		},

		getPageCount : function() {
			return this._recordSet._pageCount;
		},

		setPageCount : function(pageCount) {
			this._recordSet._pageCount = pageCount;
		},

		getLoadDataAction : function() {
			return this._loadDataAction;
		},

		setLoadDataAction : function(action) {
			if (action.length > 0 && action.charAt(0) == '/') {
				action = __CONTEXT_PATH + action;
			};
			this._loadDataAction = action;
		},

		isInsertOnEmpty : function() {
			return this._insertOnEmpty;
		},

		setInsertOnEmpty : function(isInsertOnEmpty) {
			this._insertOnEmpty = isInsertOnEmpty;
		},

		addField : function(name, dataType) {
			if (name.toLowerCase() == "select")
				dataType = "boolean";
			var field = new Field(name, dataType);
			this._fields.put(name.toLowerCase(), field);
			return field;
		},

		getField : function(name) {
			if (typeof(name) == "string")
				name = name.toLowerCase();
			return this._fields.get(name);
		},

		removeField : function(name) {
			if (typeof(name) == "string")
				name = name.toLowerCase();
			return this._fields.get(name);
		},

		getFieldCount : function() {
			return this._fields.size();
		},

		setMasterLink : function(masterDataset, masterKeyFields, detailKeyparas) {
			var _masterLink = this._masterLink;
			if (_masterLink != null) {
				var _masterDataset = _masterLink._masterDataset;
				_masterDataset.removeDetailLink(_masterLink);
			};
			var masterDetailLink = null;
			if (masterDataset != null) {
				masterDetailLink = new MasterDetailLink(masterDataset, this);
				masterDetailLink.setMasterKeyFields(masterKeyFields);
				masterDetailLink.setDetailKeyparas(detailKeyparas);
				this._masterLink = masterDetailLink;
				masterDataset.addDetailLink(masterDetailLink);
			} else {
				this._masterLink = masterDetailLink;
			};
			return masterDetailLink;
		},

		addDetailLink : function(detailLink) {
			if (this._detailLinks == null) {
				this._detailLinks = new Collection();
			};
			this._detailLinks.insert(detailLink);
			this.addObserver(detailLink._detailDataset);
		},

		removeDetailLink : function(detailLink) {
			if (this._detailLinks != null) {
				this._detailLinks.remove(detailLink);
			}
		},

		addObserver : function(control) {
			this._observers.insert(control);
			if (this._disableControlCount > 0 || control._disableBindingCount > 0 || !control._active)
				return;
			control.processDatasetMessage(__Dataset_MSG_REFRESH, this, null);
		},

		removeObserver : function(observer) {
			this._observers.remove(observer);
		},

		clearData : function() {
			this.disableControls();
			try {
				this._doClearData();
				this.moveFirst();
			} finally {
				this.enableControls();
				this.broadcastDatasetMessage(__Dataset_MSG_REFRESH, null);
			}
		},

		_doClearData : function() {
			this._recordSet.clearData();
		},


		$Hp : function(pageIndex, refRecord) {
			var recordSet = this._recordSet;
			var size;
			if (pageIndex == recordSet._pageCount) {
				if (this._recordSet._lastPageRecordCount == 0 && this._recordSet._recordCount > 0) {
					size = this._pageSize;
				} else {
					size = this._recordSet._lastPageRecordCount;
				}
			} else {
				size = this._pageSize;
			};
			for (var i = 0; i < size; i++) {
				var record = new Record(this);
				if (refRecord != null) {
					recordSet.insertElement(record, "before", refRecord);
				} else {
					recordSet.insertElement(record);
				};
				record._visible = true;
				record._pageIndex = pageIndex;
			}
		},

		isPageLoaded : function(pageIndex) {
			if (pageIndex <= this.getPageCount()) {
				var $ba = this._recordSet.getPage(pageIndex);
				return ($ba != null);
			} else {
				return false;
			}
		},

		loadPage : function(pageIndex, async, handleDataLoadedFunc) {
			var pageSize = this._pageSize;
			if (!(pageSize > -1))
				pageSize = 0;
			var xmlDom, $x_;
			if (browserType == BROWSETYPE_MSIE) {
				xmlDom = new ActiveXObject("Msxml.DOMDocument");
				$x_ = xmlDom;
			} else {
				xmlDom = document.createElement("DOM");
				$x_ = document;
			};
			var $GQ = $x_.createElement("rpc");
			xmlDom.appendChild($GQ);
			$GQ.setAttribute("datasetid", this._originId);
			$GQ.setAttribute("datasettype", this._type);
			$GQ.setAttribute("pageindex", pageIndex);
			$GQ.setAttribute("pagesize", pageSize);
			var $84 = $0P($x_, this._paras);
			if ($84 != null)
				$GQ.appendChild($84);
			var $y5 = $_B($x_, this._viewModel._properties);
			if ($y5 != null)
				$GQ.appendChild($y5);
			var xml;
			if (browserType == BROWSETYPE_MSIE) {
				xml = xmlDom.xml;
			} else {
				xml = xmlDom.innerHTML;
			};
			delete xmlDom;
			xmlDom = null;
			if (async) {
				$o6(this._viewModel, this._loadDataAction, "loadData", xml, this._showLoadingTip, handleDataLoadedFunc);
				return null;
			} else {
				var xmlDom = $qe(this._viewModel, this._loadDataAction, "loadData", xml, this._showLoadingTip);
				return xmlDom;
			}
		},

		getRecordSetXml : function(xmlDom) {
			var recordSetXml = null;
			try {
				if (xmlDom != null) {
					var node = xmlDom.documentElement;
					$QR(node, this.getViewModel().properties());
					this.__xml = node;
					if (parseBoolean(node.getAttribute("succeed"))) {
						var fieldCount = this._fields.size();
						for (var i = 0; i < fieldCount; i++) {
							this._fields.get(i)._sortType = null;
						};
						if (browserType == BROWSETYPE_MSIE) {
							recordSetXml = node.selectSingleNode("records");
						} else {
							recordSetXml = node.getElementsByTagName("records")[0];
						}
					} else {
						var message;
						if (browserType == BROWSETYPE_MSIE) {
							message = node.selectSingleNode("errormessage").text;
						} else {
							var $77 =
								node.getElementsByTagName("errormessage")[0].firstChild;
							if ($77 != null)
								message = $77.nodeValue;
						};
						throw __DATASET_LOADDATA_ERROR + "\n" + message;
					};
					delete xmlDom;
				} else {
					throw __DATASET_LOADDATA_ERROR;
				}
			} catch (e) {
				processException(e);
			};
			return recordSetXml;
		},

		loadData : function(insertMode) {
			var size = 0;
			if (!this._async) {
				var xmlDom = this.loadPage(1, false);
				if (xmlDom != null) {
					var recordSetXml = this.getRecordSetXml(xmlDom);
					if (recordSetXml != null) {
						size = this.loadFromXmlNode(recordSetXml, true, null, insertMode);
					}
				}
			} else {
				var dataset = this;
				var recordSet = dataset._recordSet;
				this.loadPage(1, true, function(xmlDom) {
					var recordSetXml = dataset.getRecordSetXml(xmlDom);
					if (recordSetXml != null) {
						dataset.loadFromXmlNode(recordSetXml, true, recordSet, insertMode);
					}
				});
			};
			return size;
		},

		loadPage : function(pageIndex, handleDataLoadedFunc) {
			return this.doLoadPage(pageIndex, false, true, handleDataLoadedFunc);
		},

		doLoadPage : function(pageIndex, clearData, bRefreshControl, handleDataLoadedFunc) {
			var pageIndexArray;
			if (typeof(pageIndex) == "number") {
				pageIndexArray =[pageIndex];
			} else {
				pageIndexArray = pageIndex.split(",");
			};
			var arr = new Array();
			var recordSet = this._recordSet;
			var pageCount = recordSet._pageCount;
			for (var i = 0; i < pageIndexArray.length; i++) {
				var index = parseInt(pageIndexArray[i]);
				if (index > 0 && index <= pageCount) {
					var $ba = recordSet.getPage(index);
					if ($ba == null) {
						arr.push(index);
					}
				}
			};
			if (arr.length > 0) {
				if (typeof(bRefreshControl) == "undefined") {
					bRefreshControl = true;
				};
				return this.$m$(arr.join(","), clearData, bRefreshControl, handleDataLoadedFunc);
			} else {
				return 0;
			}
		},

		$m$ : function(pageIndex, clearData, bRefreshControl, handleDataLoadedFunc) {
			if (clearData) {
				this._doClearData();
			};
			var size = 0;
			if (!this._async) {
				var xmlDom = this.loadPage(pageIndex, false);
				if (xmlDom != null) {
					var recordSetXml = this.getRecordSetXml(xmlDom);
					if (recordSetXml != null) {
						size = this.loadFromXmlNode(recordSetXml, bRefreshControl, null, null);
					}
				}
			} else {
				var dataset = this;
				var recordSet = dataset._recordSet;
				this.loadPage(pageIndex, true, function($lk, xmlDom) {
					if ($lk) {
						var recordSetXml = dataset.getRecordSetXml(xmlDom);
						if (recordSetXml != null) {
							size = dataset.loadFromXmlNode(recordSetXml, bRefreshControl, recordSet, null);
						}
					};
					if (handleDataLoadedFunc != null)
						handleDataLoadedFunc($lk);
				});
			};
			return size;
		},


		doInsertRecord : function(mode) {
			if (this._current != null) {
				if (!this.postRecord())
					return;
			};
			if (this._disableEventCount <= 0) {
				var result = fireDoradoEvent(this, "beforeInsert",[this]);
				if (result != null)
					throw result;
			};
			var record = new Record(this);
			var fieldCount = this._fields.size();
			for (var i = 0; i < fieldCount; i++) {
				var field = this._fields.get(i);
				if (field._defaultValue != null) {
					record.doChangeValue(field.name, field._defaultValue);
				}
			};
			var masterDetailLink = this._masterLink;
			if (masterDetailLink != null) {
				var masterDataset = masterDetailLink._masterDataset;
				var masterRecord = masterDataset._current;
				var masterKeyFieldArray = masterDetailLink._masterKeyFieldArray;
				var detailKeyFieldArray = masterDetailLink._detailKeyFieldArray;
				if (masterRecord != null && (masterKeyFieldArray.length == detailKeyFieldArray.length)) {
					for (var i = 0; i < masterKeyFieldArray.length; i++) {
						record.doChangeValue(detailKeyFieldArray[i], masterRecord.getValue(masterKeyFieldArray[i]));
					}
				}
			}
			switch (mode) {
				case "before" :
					;
				case "after" :
					{
						record._pageIndex = this._current._pageIndex;
						break;
					};
				case "begin" :
					{
						record._pageIndex = 1;
						break;
					};
				default :
					{
						record._pageIndex = this._recordSet._pageCount;
						break;
					}
			};
			var recordSet = this._recordSet;
			recordSet.insertElement(record, mode, this._current);
			record.setState(RECORD_STATUS_NEW);
			record._dirty = true;
			this.setCurrent(record);
			if (recordSet._visibleRecordCount >= 0)
				recordSet._visibleRecordCount++;
			if (this._disableEventCount <= 0) {
				fireDoradoEvent(this, "afterInsert",[this]);
			};
			return record;
		},

		insertRecord : function(mode) {
			try {
				return this.doInsertRecord(mode);
			} catch (e) {
				processException(e)
			}
		},

		insertRecords : function(records, mode) {
			if (records.length == 0)
				return;
			try {
				var collection = new Collection();
				var record;
				for (var i = 0; i < records.length; i++) {
					record = records[i];
					record.setState(RECORD_STATUS_INSERT);
					collection.insertElement(record);
				};
				var recordSet = this._recordSet;
				recordSet.insertCollection(collection, mode, this._current);
				this.setCurrent(record);
				if (recordSet._visibleRecordCount >= 0)
					recordSet._visibleRecordCount += records.length;
				this.broadcastDatasetMessage(__Dataset_MSG_REFRESH, null);
			} catch (e) {
				processException(e)
			}
		},

		__deleteRecord : function(record) {
			record._dirty = false;
			if (record._state == RECORD_STATUS_NEW || record._state == RECORD_STATUS_INSERT) {
				this._recordSet.removeElement(record);
				record._state = RECORD_STATUS_DELETE;
			} else {
				record.setState(RECORD_STATUS_DELETE);
			};
			var recordSet = this._recordSet;
			if (recordSet._visibleRecordCount >= 0)
				recordSet._visibleRecordCount--;
			var fieldCount = this._fields.size();
			for (var i = 0; i < fieldCount; i++) {
				var field = this._fields.get(i);
				if (field._supportsSum) {
					var sum = recordSet._sum;
					if (sum == null) {
						sum = new Object();
						recordSet._sum = sum;
					};
					var sumFieldName = "_" + field.name;
					var sumValue = sum[sumFieldName];
					if (typeof(sumValue) != "number") {
						sumValue = 0;
					};
					var $wD = parseFloat(record.getValue(i));
					if (!isNaN($wD))
						sumValue -= $wD;
					sum[sumFieldName] = sumValue;
				}
			}
		},

		doDeleteRecord : function(record) {
			if (record == null)
				record = this._current;
			if (record == null) {
				throw __DATASET_ERR_NO_CURRENT.replace(
					/ % s / g,
					this.id + ".deleteRecord");
				return;
			};
			if (this._disableEventCount <= 0) {
				var result = fireDoradoEvent(this, "beforeDelete",[this, record]);
				if (result != null)
					throw result;
			};
			var nextCurRecord = null;
			if (record == this._current) {
				nextCurRecord = record.getNextRecord();
				if (nextCurRecord == null) {
					nextCurRecord = record.getPrevRecord();
				}
			} else {
				nextCurRecord = this._current;
			};
			var isNew = record._state == RECORD_STATUS_NEW;
			this.__deleteRecord(record);
			if (nextCurRecord != this._current) {
				this.setCurrent(nextCurRecord);
			};
			this.broadcastDatasetMessage(__Dataset_MSG_RECORD_DELETED,[record]);
			if (this._disableEventCount <= 0) {
				fireDoradoEvent(this, "afterDelete",[this, record]);
			};
			if (isNew)
				record.destroy();
		},

		deleteRecord : function(record) {
			try {
				this.doDeleteRecord(record);
			} catch (e) {
				processException(e)
			}
		},


		getOldRecord : function(record) {
			if (record == null) {
				return this.getCurrent().getOldRecord();
			} else {
				return record.getOldRecord();
			}
		},

		broadcastDatasetMessage : function(message, args) {
			if (this._disableControlCount > 0)
				return;
			var element = this._observers._first;
			while (element) {
				var control = element.getData();
				if (control._disableBindingCount <= 0) {
					control.processDatasetMessage(message, this, args);
				};
				element = element._phsNext;
			}
		},

		initOnMasterRecord : function(masterRecord) {
			var recordSet = this._recordSet;
			var masterDetailLink = this._masterLink;
			var masterKeyFieldArray = masterDetailLink._masterKeyFieldArray;
			var detailKeyParameterArray = masterDetailLink._detailKeyParameterArray;
			var paras = this._paras;
			var detailRecordSet = null;
			var paras = this._paras;
			if (masterRecord != null) {
				detailRecordSet = masterRecord.addDetailRecordSet(this.id);
				if (masterRecord._state == RECORD_STATUS_NEW) {
					detailRecordSet.getPageObject(1);
				};
				for (var i = 0; i < masterKeyFieldArray.length; i++) {
					paras.setValue(detailKeyParameterArray[i], masterRecord.getValue(masterKeyFieldArray[i]));
				}
			} else {
				for (var i = 0; i < masterKeyFieldArray.length; i++) {
					paras.setValue(detailKeyParameterArray[i], null);
				}
			};
			if (recordSet != detailRecordSet) {
				this.disableControls();
//				this.$0T = true;
				this.setRecordSet(detailRecordSet);
//				this.$0T = false;
				this.enableControls();
			}
		},

		processDatasetMessage : function(message, dataset, args) {
			if (message == __Dataset_MSG_REFRESH
				|| message == __Dataset_MSG_CURRENT_CHANGED) {
				var masterDetailLink = this._masterLink;
				if (masterDetailLink != null && masterDetailLink._masterDataset == dataset) {
					this.initOnMasterRecord(masterDetailLink._masterDataset._current);
					this.refreshControls();
				}
			}
		},

		refreshControls : function() {
			this.validateCurrent();
			this.broadcastDatasetMessage(__Dataset_MSG_REFRESH, null);
		},

		disableControls : function() {
			this._disableControlCount++;
		},

		enableControls : function() {
			if (this._disableControlCount < 1) {
				this._disableControlCount = 0;
			} else {
				this._disableControlCount--;
			}
		},

		disableEvents : function() {
			this._disableEventCount++;
		},

		enableEvents : function() {
			if (this._disableEventCount < 1) {
				this._disableEventCount = 0;
			} else {
				this._disableEventCount--;
			}
		},

		flushData : function(handleDataLoadedFunc) {
			try {
				if (this._disableEventCount <= 0) {
					var result = fireDoradoEvent(this, "beforeFlushData",[this]);
					if (result != null)
						throw result;
				};
				if (!this._async) {
					this.$m$(this._recordSet._pageIndex, true, true);
					if (this._disableEventCount <= 0) {
						fireDoradoEvent(this, "afterFlushData",[this]);
					}
				} else {
					var dataset = this;
					this.$m$(this._recordSet._pageIndex, true, true, function($lk) {
						if ($lk) {
							if (dataset._disableEventCount <= 0) {
								fireDoradoEvent(dataset, "afterFlushData",[dataset]);
							}
						}
						if (handleDataLoadedFunc != null)
							handleDataLoadedFunc($lk);
					});
				}
			} catch (e) {
				processException(e);
			}
		},

		appendFromXml : function() {
			if (this._loading)
				return;
			this._loading = true;
			var xmlDom = document.getElementById("__" + this.id);
			if (xmlDom != null) {
				var node;
				if (browserType == BROWSETYPE_MSIE) {
					node = xmlDom.documentElement;
				} else {
					node = xmlDom.getElementsByTagName("records")[0];
				};
				if (node != null) {
					this.loadFromXmlNode(node, true, null, null);
				}
			};
			if (this._insertOnEmpty && this.getCurrent() == null) {
				this.insertRecord();
			}
		},

		loadFromXmlNode : function(node, bRefreshControl, recordSet, insertMode) {
			function $fK(recordSet, startPageIndex, endPageIndex, refRecord) {
				var record;
				if (refRecord == null) {
					record = recordSet._first;
				} else {
					record = refRecord;
				};
				if (record != null) {
					do {
						if (record._pageIndex >= startPageIndex && record._pageIndex <= endPageIndex && record._visible) {
							recordSet.removeElement(record);
						} else if (record._pageIndex > endPageIndex) {
							return record;
						}
						record = record._phsNext;
					} while (record != null);
				};
				return null;
			};
			var viewModel = this._viewModel;
			var recordMap = viewModel._recordMap;
			if (typeof(recordMap) == "undefined" && viewModel._properties.getValue("__recordMapRef") > 0) {
				recordMap = new Object();
				viewModel._recordMap = recordMap;
			};
			var size = 0;
			if (recordSet == null)
				recordSet = this._recordSet;
			recordSet._pageCount = parseInt(node.getAttribute("pageCount"));
			var $_h = true;
			var recordCount = parseInt(node.getAttribute("possibleCount"));
			if (isNaN(recordCount)) {
				recordSet._recordCount = 0;
				recordSet._visibleRecordCount = -1;
				$_h = false;
			} else {
				if (this._autoLoadPage) {
					if (recordSet._visibleRecordCount > -1) {
						recordSet._visibleRecordCount = recordCount + (recordSet._visibleRecordCount - recordSet._recordCount);
					} else {
						recordSet._visibleRecordCount = recordCount;
					}
				} else {
					$_h = false;
				};
				recordSet._recordCount = recordCount;
				recordSet._lastPageRecordCount = recordCount % this._pageSize;
			};
			var sums = node.getAttribute("sums");
			if (sums) {
				var fieldNameArray = new Array();
				var fieldCount = this._fields.size();
				for (var i = 0; i < fieldCount; i++) {
					var field = this._fields.get(i);
					if (field._supportsSum) {
						fieldNameArray.push(field.name);
					}
				};
				var sum = recordSet._sum;
				if (sum == null) {
					sum = new Object();
					recordSet._sum = sum;
				};
				var sums = sums.split(",");
				for (var i = 0; i < sums.length; i++) {
					sum["_" + fieldNameArray[i]] = parseFloat(sums[i]);
				}
			};
			var pageIndexArray = new Array();
			var loadedPages = node.getAttribute("loadedPages");
			if (loadedPages != null) {
				var loadedPageArray = loadedPages.split(",");
				for (var i = 0; i < loadedPageArray.length; i++) {
					var pageIndex = parseInt(loadedPageArray[i]);
					pageIndexArray.push(pageIndex);
					recordSet.getPageObject(pageIndex);
				}
			};
			var recordNodes = node.childNodes;
			var record = null;
			var refRecord = null;
			if (insertMode == null) {
				refRecord = $fK(recordSet, pageIndexArray[0], pageIndexArray[pageIndexArray.length - 1], refRecord);
			} else {
				switch (insertMode) {
					case "begin" :
						refRecord = recordSet._first;
						break;
					case "before" :
						refRecord = this._current;
						break;
					case "after" :
						if (this._current != null) {
							refRecord = this._current.getNextRecord();
						};
						break;
					default :
						break;
				}
			};
			for (var i = 0; i < recordNodes.length; i++) {
				var recordNode = recordNodes[i];
				if (browserType != BROWSETYPE_MSIE && recordNode.nodeName.charAt(0) == '#') {
					continue;
				};
				var record1 = new Record(this, recordSet);
				record1._xmlNode = recordNode;
				var recordId = recordNode.getAttribute("id");
				if (recordId != null) {
					record1._id = recordId;
				};
				if (recordMap != null) {
					recordMap[record1._id] = record1;
				};
				if (parseBoolean(recordNode.getAttribute("isCurrent"))) {
					record = record1;
				};
				var pageIndex = parseInt(recordNode.getAttribute("pageIndex"));
				if (!(pageIndex > 0))
					pageIndex = 1;
				record._pageIndex = pageIndex;
				if (refRecord != null) {
					recordSet.insertElement(record, "before", refRecord);
				} else {
					recordSet.insertElement(record);
				};
				record._state = recordNode.getAttribute("state");
				if (record._state != null) {
					if (record._state == "new") {
						record._dirty = true;
						record._saveValidRecord();
					} else if (record._state == "modify") {
						record._dirty = true;
						record._saveValidRecord();
					}
				};
				if (record._state != RECORD_STATUS_DELETE) {
					size++;
					if (!$_h)
						recordSet._visibleRecordCount++;
				}
			};
			if (bRefreshControl) {
				this.disableControls();
				if (record != null && recordSet == this._recordSet) {
					this.setCurrent(record);
				} else if (this._current == null) {
					var record = this.getFirstRecord();
					this.doChangeCurrent(record);
					this._first = true;
				};
				this.enableControls();
				this.broadcastDatasetMessage(__Dataset_MSG_REFRESH, null);
			};
			return size;
		},

		sort : function(fieldNames) {
			function quickSort(array, fields, low, high) {
				function compareRecord(record, mid_data) {
					if (fields.length > 0) {
						var value1, value2;
						for (var i = 0; i < fields.length; i++) {
							var field = fields[i];
							if (field.ascent) {
								value1 = 1;
								value2 = -1;
							} else {
								value1 = -1;
								value2 = 1;
							};
							var value = record.getValue(field.field);
							var $r_ = mid_data.getValue(field.field);
							if (value > $r_) {
								return value1;
							} else if (value < $r_) {
								return value2;
							}
						}
					} else {
						if (record._pageIndex > mid_data._pageIndex) {
							return 1;
						} else if (record._pageIndex < mid_data._pageIndex) {
							return -1;
						} else {
							if (record._id > mid_data._id) {
								return 1;
							} else if (record._id < mid_data._id) {
								return -1;
							}
						}
					};
					return 0;
				};
				var low1 = low;
				var high1 = high;
				var $EP = parseInt((low1 + high1) / 2);
				var mid_data = array[$EP];
				do {
					while (compareRecord(array[low1], mid_data) < 0)
						low1++;
					while (compareRecord(array[high1], mid_data) > 0)
						high1--;
					if (low1 <= high1) {
						var $4h = array[low1];
						array[low1] = array[high1];
						array[high1] = $4h;
						low1++;
						high1--;
					}
				}
				while (low1 <= high1)
					if (high1 > low)
						quickSort(array, fields, low, high1);
				if (high > low1)
					quickSort(array, fields, low1, high);
			};
			var recordSet = this._recordSet;
			if (this._autoLoadPage && recordSet._pageCount > 1) {
				alert(__DATASET_SORT_NOT_SUPPORTED);
				return false;
			};
			var fields = new Array();
			if (fieldNames) {
				var fieldName_array = fieldNames.split(",");
				for (var i = 0; i < fieldName_array.length; i++) {
					var $kn = new Object();
					var fieldName = fieldName_array[i];
					var $gg = fieldName.charAt(0);
					if ($gg == "+") {
						$kn.ascent = true;
						$kn.field = fieldName.substring(1);
					} else if ($gg == "-") {
						$kn.ascent = false;
						$kn.field = fieldName.substring(1);
					} else {
						$kn.ascent = true;
						$kn.field = fieldName;
					};
					fields.push($kn);
				}
			};
			if (this.getCurrent() != null) {
				var array = new Array();
				var record = recordSet._first;
				while (record != null) {
					array.push(record);
					record = record._phsNext;
				};
				quickSort(array, fields, 0, array.length - 1);
				var element = recordSet._first;
				while (element) {
					if (element._data) {
						delete element._data;
					};
					element = element._phsNext;
				};
				recordSet.initIndexs();
				recordSet._first = null;
				recordSet._last = null;
				recordSet._size = 0;
				for (var i = 0; i < array.length; i++) {
					recordSet.insertElement(array[i]);
				};
				this._first = false;
				this._last = false;
			};
			var fieldCount = this._fields.size();
			for (var i = 0; i < fieldCount; i++) {
				this._fields.get(i)._sortType = null;
			};
			for (var i = 0; i < fields.length; i++) {
				var $kn = fields[i];
				this._fields.get($kn.field.toLowerCase())._sortType =
					(($kn.ascent) ? "ascent" : "descent");
			};
			this.$Sa = (fields.length > 0);
			this.broadcastDatasetMessage(__Dataset_MSG_REFRESH, null);
		},

		getSum : function(field) {
			var sum = this._recordSet._sum;
			if (sum != null) {
				var sumValue = sum["_" + field];
				if (typeof(sumValue) == "number") {
					return sumValue;
				}
			};
			return 0;
		},

		find : function(fieldNames, values, startRecord) {
			if (fieldNames.length > 0 && fieldNames.length == values.length) {
				var array = new Array();
				for (var i = 0; i < fieldNames.length; i++) {
					array.push(this._fields.indexOf(fieldNames[i].toLowerCase()));
				};
				var record = ((startRecord != null) ? startRecord : this.getFirstRecord());
				while (record != null) {
					var isObjectRecord = true;
					for (var i = 0; i < array.length; i++) {
						if (record[array[i]] != values[i]) {
							isObjectRecord = false;
							break;
						}
					};
					if (isObjectRecord) {
						return record;
					};
					record = record.getNextRecord();
				}
			};
			return null;
		}

	}
});

System.defineClass({
	name		: "pst.data.Validator",
	superc		: jcf.Object,
	statics		: {},
	instances	: {
		initializa : function () {
			this._validateImmediately = true;
			this._errorMessage = null;
		},

		isValidateImmediately : function() {
			return this._validateImmediately;
		},

		setValidateImmediately : function($LY) {
			this._validateImmediately = $LY;
		},

		getErrorMessage : function() {
			return this._errorMessage;
		},

		setErrorMessage : function($mx) {
			this._errorMessage = $mx;
		},

		getFinalErrorMessage : function() {
			return this._errorMessage;
		},

		$RU : function() {
			throw this.getFinalErrorMessage();
		}

	}
});


System.defineClass({
	name		: "pst.data.RequiredValidator",
	superc		: pst.data.Validator,
	statics		: {},
	instances	: {
		initialize : function () {
			this._doradoClass = "RequiredValidator";
			this._validateImmediately = false;
			this._errorMessage = __VALIDATOR_REQUIRED_MESSAGE;
		},

		validate : function(value) {
			if (typeof(value) == "undefined" || value == null || value.length == 0) {
				return false;
			};
			return true;
		}
	}
});

System.defineClass({
	name		: "pst.data.LengthValidator",
	superc		: pst.data.Validator,
	statics		: {},
	instances	: {
		initialize : function () {
			this._doradoClass = "LengthValidator";
			this._errorMessage = __VALIDATOR_LENGTH_MESSAGE;
			this._minLength = 0;
			this._maxLength = 0;
		},

		getMinLength : function() {
			return this._minLength;
		},

		setMinLength : function(minLength) {
			this._minLength = minLength;
		},

		getMaxLength : function() {
			return this._maxLength;
		},

		setMaxLength : function(maxLength) {
			this._maxLength = maxLength;
		},

		validate : function(value) {
			var $8f = 0;
			if (value != null) {
				$8f = new String(value).length;
			};
			if (this._minLength > 0 && $8f < this._minLength) {
				return false;
			};
			if (this._maxLength > 0 && $8f > this._maxLength) {
				return false;
			};
			return true;
		}
	}
});



var $lB = "ignore";
var $aj = "allow_equals";
var $OT = "not_allow_equals";

System.defineClass({
	name		: "pst.data.RangeValidator",
	superc		: pst.data.Validator,
	statics		: {},
	instances	: {
		initialize : function () {
			this._doradoClass = "RangeValidator";
			this._errorMessage = __VALIDATOR_RANGE_MESSAGE;
			this._min = 0;
			this._minMatchRule = $lB;
			this._max = 0;
			this._maxMatchRule = $lB;
		},

		getMin : function() {
			return this._min;
		},

		setMin : function(min) {
			this._min = min;
		},

		getMinMatchRule : function() {
			return this._minMatchRule;
		},

		setMinMatchRule : function(MinMatchRule) {
			this._minMatchRule = MinMatchRule;
		},

		getMax : function() {
			return this._max;
		},

		setMax : function(max) {
			this._max = max;
		},

		getMaxMatchRule : function() {
			return this._maxMatchRule;
		},

		setMaxMatchRule : function(maxMatchRule) {
			this._maxMatchRule = maxMatchRule;
		},

		validate : function(value) {
			var n = parseFloat(value);
			if (isNaN(n))
				n = 0;
			var $8O = true;
			if (this._minMatchRule == $aj) {
				if (!(n >= this._min)) {
					$8O = true;
				}
			} else if (this._minMatchRule == $OT) {
				if (!(n > this._min)) {
					$8O = true;
				}
			};
			if (this._maxMatchRule == $aj) {
				if (!(n <= this._max)) {
					$8O = true;
				}
			} else if (this._maxMatchRule == $OT) {
				if (!(n < this._max)) {
					$8O = true;
				}
			};
			if ($8O) {
				return false;
			};
			return true;
		}
	}
});


System.defineClass({
	name		: "pst.data.ListValidator",
	superc		: pst.data.Validator,
	statics		: {},
	instances	: {
		initialize : function () {
			this._doradoClass = "ListValidator";
			this._errorMessage = __VALIDATOR_LIST_MESSAGE;
			this.$54 = null;
			this.$Fy = null;
		},

		getValues : function() {
			return this._values;
		},

		setValues : function(values) {
			this._values = values;
			if (values != null) {
				this.$Fy = values.split(",");
			} else {
				this.$Fy = null;
			}
		},

		validate : function(value) {
			var s = "";
			if (value != null) {
				s = value.toString();
			};
			if (s.length > 0 && this.$Fy != null && this.$Fy.length > 0) {
				for (var i = 0; i < this.$Fy.length; i++) {
					if (this.$Fy[i] == s)
						return true;
				};
				return false;
			};
			return true;
		}
	}
});


System.defineClass({
	name		: "pst.data.PatternValidator",
	superc		: pst.data.Validator,
	statics		: {},
	instances	: {
		initialize : function () {
			this._doradoClass = "PatternValidator";
			this._errorMessage = __VALIDATOR_PATTERN_MESSAGE;
			this.$Mw = null;
			this.$lL = null;
		},

		getPattern : function() {
			return this._pattern;
		},

		setPattern : function(pattern) {
			if (pattern) {
				var $5Z = new RegExp();
				$5Z.compile($Y2, "$rZ");
				this.$lL = $5Z;
			} else { 
				this.$lL = null;
			};
			this._pattern = pattern;
		},

		validate : function(value) {
			var s = "";
			if (value != null) {
				s = value.toString();
				var $5Z = this.$lL;
				if (s.length > 0 && $5Z != null) {
					return $5Z.test(s);
				}
			};
			return true;
		}
});




